package libraryapplication;

import databaselayer.Const;
import java.sql.*;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

public class FindBook extends javax.swing.JFrame {
    private Connection connect;
    private JTable table;
    
    public FindBook() {
        initComponents();
    }

    public FindBook(Connection myConnect, JTable TableView1) {
    // передаем в конструктор объект таблицы с главного меню для отображения результатов поиска 
        initComponents();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE); 
        setVisible(true); 
        table = TableView1; 
        connect = myConnect;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LabelPanel = new javax.swing.JPanel();
        LabelName = new javax.swing.JLabel();
        LabelAuthor = new javax.swing.JLabel();
        LabelPublisher = new javax.swing.JLabel();
        LabelPublisherYear = new javax.swing.JLabel();
        LabelNumInstan = new javax.swing.JLabel();
        LabelCostBook = new javax.swing.JLabel();
        LabelVolumeBook = new javax.swing.JLabel();
        Find = new javax.swing.JButton();
        FieldPanel = new javax.swing.JPanel();
        FieldName = new javax.swing.JTextField();
        FieldAuthor = new javax.swing.JTextField();
        FieldPublisher = new javax.swing.JTextField();
        FieldPublisherYear = new javax.swing.JTextField();
        FieldNumInstan = new javax.swing.JTextField();
        FieldCostBook = new javax.swing.JTextField();
        FieldVolumeBook = new javax.swing.JTextField();
        Cancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Поиск книги");
        setResizable(false);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.X_AXIS));

        LabelPanel.setBackground(new java.awt.Color(255, 255, 204));
        LabelPanel.setPreferredSize(new java.awt.Dimension(200, 400));
        LabelPanel.setLayout(new java.awt.GridLayout(8, 0));

        LabelName.setFont(new java.awt.Font("Gungsuh", 0, 14)); // NOI18N
        LabelName.setText("Название");
        LabelPanel.add(LabelName);

        LabelAuthor.setFont(new java.awt.Font("Gungsuh", 0, 14)); // NOI18N
        LabelAuthor.setText("Автор (Фамилия И.О.)");
        LabelPanel.add(LabelAuthor);

        LabelPublisher.setFont(new java.awt.Font("Gungsuh", 0, 14)); // NOI18N
        LabelPublisher.setText("Издательство");
        LabelPanel.add(LabelPublisher);

        LabelPublisherYear.setFont(new java.awt.Font("Gungsuh", 0, 14)); // NOI18N
        LabelPublisherYear.setText("Год издания");
        LabelPanel.add(LabelPublisherYear);

        LabelNumInstan.setFont(new java.awt.Font("Gungsuh", 0, 14)); // NOI18N
        LabelNumInstan.setText("Кол-во экземпляров");
        LabelPanel.add(LabelNumInstan);

        LabelCostBook.setFont(new java.awt.Font("Gungsuh", 0, 14)); // NOI18N
        LabelCostBook.setText("Цена одного издания");
        LabelPanel.add(LabelCostBook);

        LabelVolumeBook.setFont(new java.awt.Font("Gungsuh", 0, 14)); // NOI18N
        LabelVolumeBook.setText("Кол-во страниц");
        LabelPanel.add(LabelVolumeBook);

        Find.setFont(new java.awt.Font("Gungsuh", 1, 14)); // NOI18N
        Find.setText("Поиск");
        Find.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindActionPerformed(evt);
            }
        });
        LabelPanel.add(Find);

        getContentPane().add(LabelPanel);

        FieldPanel.setBackground(new java.awt.Color(255, 255, 204));
        FieldPanel.setPreferredSize(new java.awt.Dimension(200, 400));
        FieldPanel.setLayout(new java.awt.GridLayout(8, 0));

        FieldName.setFont(new java.awt.Font("Gungsuh", 0, 14)); // NOI18N
        FieldPanel.add(FieldName);

        FieldAuthor.setFont(new java.awt.Font("Gungsuh", 0, 14)); // NOI18N
        FieldPanel.add(FieldAuthor);

        FieldPublisher.setFont(new java.awt.Font("Gungsuh", 0, 14)); // NOI18N
        FieldPanel.add(FieldPublisher);

        FieldPublisherYear.setFont(new java.awt.Font("Gungsuh", 0, 14)); // NOI18N
        FieldPanel.add(FieldPublisherYear);

        FieldNumInstan.setFont(new java.awt.Font("Gungsuh", 0, 14)); // NOI18N
        FieldNumInstan.setToolTipText("меньше чем ...");
        FieldPanel.add(FieldNumInstan);

        FieldCostBook.setFont(new java.awt.Font("Gungsuh", 0, 14)); // NOI18N
        FieldCostBook.setToolTipText("меньше чем ...");
        FieldPanel.add(FieldCostBook);

        FieldVolumeBook.setFont(new java.awt.Font("Gungsuh", 0, 14)); // NOI18N
        FieldVolumeBook.setToolTipText("меньше чем ...");
        FieldPanel.add(FieldVolumeBook);

        Cancel.setFont(new java.awt.Font("Gungsuh", 1, 14)); // NOI18N
        Cancel.setText("Отмена");
        Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelActionPerformed(evt);
            }
        });
        FieldPanel.add(Cancel);

        getContentPane().add(FieldPanel);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void FindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FindActionPerformed
        // начало формирования запроса. Условие id=id введено искусственно для случая, 
        // когда не будет введено ни одного критерия поиска для отображения всех результатов
        String query = "SELECT * FROM " + Const.BOOKS_TABLE + " WHERE " 
                + Const.BOOKS_ID + "=" + Const.BOOKS_ID;
        // далее – обработка текстовых полей с критериями поиска 
        if(!FieldName.getText().isEmpty()) { 
            query += " AND UPPER(" + Const.BOOKS_NAME + ") LIKE '%"; 
            query += FieldName.getText().toUpperCase(); 
            query += "%'"; 
        }
        if(!FieldAuthor.getText().isEmpty()) { 
            query += " AND UPPER(" + Const.BOOKS_AUTHOR + ") LIKE '%"; 
            query += FieldAuthor.getText().toUpperCase(); 
            query += "%'"; 
        }
        if(!FieldPublisher.getText().isEmpty()) { 
            query += " AND UPPER(" + Const.BOOKS_PUBLISHER + ") LIKE '%"; 
            query += FieldPublisher.getText().toUpperCase(); 
            query += "%'"; 
        }
        if(!FieldPublisherYear.getText().isEmpty()) { 
            query += " AND " + Const.BOOKS_PUBLISHER_YEAR + "="; 
            query += FieldPublisherYear.getText(); 
        }
        if(!FieldNumInstan.getText().isEmpty()) { 
            query += " AND " + Const.BOOKS_NUM_INSTAN + "<"; 
            query += FieldNumInstan.getText(); 
        }
        if(!FieldCostBook.getText().isEmpty()) { 
            query += " AND " + Const.BOOKS_COST + "<"; 
            query += FieldCostBook.getText(); 
        }
        if(!FieldVolumeBook.getText().isEmpty()) { 
            query += " AND " + Const.BOOKS_VOLUME + "<"; 
            query += FieldVolumeBook.getText(); 
        }
        // формирование содержимого таблицы с результатами с помощью DefaultTableModel:
        DefaultTableModel model = new DefaultTableModel(); 
        model.setRowCount(0); 
        model.setColumnCount(0);
        try { 
            Statement stmt = connect.createStatement(); 
            ResultSet rs = stmt.executeQuery(query); 
            ResultSetMetaData md = rs.getMetaData(); 
            for(int i=1;i<=md.getColumnCount();i++) { 
                model.addColumn(md.getColumnName(i)); 
            } 
            while(rs.next()){ 
                ArrayList<Object> mass = new ArrayList(); 
                for(int i=1;i<=md.getColumnCount();i++) { 
                    mass.add(rs.getObject(i)); 
                } 
                model.addRow(mass.toArray()); 
            }
            // перенос сформированной таблицы на главную форму проекта для отображения результатов 
            table.setModel(model); 
            this.dispose(); 
        } 
        catch(Exception e) { 
            JOptionPane.showMessageDialog(this, "Error!"); 
            this.dispose(); 
        }
    }//GEN-LAST:event_FindActionPerformed

    private void CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_CancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FindBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FindBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FindBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FindBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FindBook().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cancel;
    private javax.swing.JTextField FieldAuthor;
    private javax.swing.JTextField FieldCostBook;
    private javax.swing.JTextField FieldName;
    private javax.swing.JTextField FieldNumInstan;
    private javax.swing.JPanel FieldPanel;
    private javax.swing.JTextField FieldPublisher;
    private javax.swing.JTextField FieldPublisherYear;
    private javax.swing.JTextField FieldVolumeBook;
    private javax.swing.JButton Find;
    private javax.swing.JLabel LabelAuthor;
    private javax.swing.JLabel LabelCostBook;
    private javax.swing.JLabel LabelName;
    private javax.swing.JLabel LabelNumInstan;
    private javax.swing.JPanel LabelPanel;
    private javax.swing.JLabel LabelPublisher;
    private javax.swing.JLabel LabelPublisherYear;
    private javax.swing.JLabel LabelVolumeBook;
    // End of variables declaration//GEN-END:variables
}
